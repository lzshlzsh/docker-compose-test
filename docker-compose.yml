services:
  zookeeper:
    image: zookeeper:3.6.2
    ports:
      - target: 2181
        published: 2181
        protocol: tcp
        mode: host
    restart: on-failure
    volumes:
      - type: volume
        source: zkDataDir
        target: /data
      - type: volume
        source: zkDataLogDir
        target: /datalog

  dc:
    image: wenjunxiao/desktop-docker-connector
    restart: on-failure
    network_mode: "host"
    cap_add:
      - NET_ADMIN

  debug:
    image: ccr.ccs.tencentyun.com/sammieliu/debugsuite
    entrypoint: [ "/usr/bin/tail", "-f", "/etc/bash.bashrc" ]
    volumes:
      - type: volume
        source: debug
        target: /mount

  kafka1:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: host
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
      KAFKA_LOG_DIRS: /kafka
      KAFKA_NUM_PARTITIONS: 3
      KAFK_DEFAULT_REPLICATION_FACTOR: 3
      HOSTNAME_COMMAND: "ifconfig eth0 | awk '/inet /{print $$2}' | awk -F':' '{print $$NF}'"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://_{HOSTNAME_COMMAND}:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://_{HOSTNAME_COMMAND}:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - type: volume
        source: kafka1
        target: /kafka
    depends_on:
      - zookeeper
      - kafka2
      - kafka3

  kafka2:
    image: wurstmeister/kafka:2.13-2.8.1
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
      KAFKA_LOG_DIRS: /kafka
      KAFKA_NUM_PARTITIONS: 3
      KAFK_DEFAULT_REPLICATION_FACTOR: 3
      HOSTNAME_COMMAND: "ifconfig eth0 | awk '/inet /{print $$2}' | awk -F':' '{print $$NF}'"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://_{HOSTNAME_COMMAND}:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://_{HOSTNAME_COMMAND}:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - type: volume
        source: kafka2
        target: /kafka
    depends_on:
      - zookeeper

  kafka3:
    image: wurstmeister/kafka:2.13-2.8.1
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
      KAFKA_LOG_DIRS: /kafka
      KAFKA_NUM_PARTITIONS: 3
      KAFK_DEFAULT_REPLICATION_FACTOR: 3
      HOSTNAME_COMMAND: "ifconfig eth0 | awk '/inet /{print $$2}' | awk -F':' '{print $$NF}'"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://_{HOSTNAME_COMMAND}:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://_{HOSTNAME_COMMAND}:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - type: volume
        source: kafka3
        target: /kafka
    depends_on:
      - zookeeper

  es:
    image: elasticsearch:7.17.9
    ports:
      - target: 9200
        published: 9200
        protocol: tcp
        mode: host
    environment:
      discovery.type: single-node
    volumes:
      - type: volume
        source: es
        target: /var/lib/elasticsearch

  kibana:
    image: kibana:7.17.9
    ports:
      - target: 5601
        published: 5601
        protocol: tcp
        mode: host
    environment:
      ELASTICSEARCH_HOSTS: http://es:9200
    depends_on:
      - es

  mysql:
    image: biarms/mysql:5.7
    command: --log-bin=mysql-bin --expire-logs-days=1 --server-id=123 --binlog-row-image=full --character-set-server=utf8 --gtid-mode=on --enforce-gtid-consistency=on --log-slave-updates=on
    ports:
      - target: 3306
        published: 3307
        protocol: tcp
        mode: host
    environment:
      MYSQL_ROOT_PASSWORD: 123456@Hello
    volumes:
      - type: volume
        source: mysql
        target: /var/lib/mysql
    depends_on:
      - mysql_slave

  mysql_slave:
    image: biarms/mysql:5.7
    command: --log-bin=mysql-bin --expire-logs-days=1 --server-id=124 --binlog-row-image=full --character-set-server=utf8 --gtid-mode=on --enforce-gtid-consistency=on --log-slave-updates=on
    ports:
      - target: 3306
        published: 3309
        protocol: tcp
        mode: host
    environment:
      MYSQL_ROOT_PASSWORD: 123456@Hello
    volumes:
      - type: volume
        source: mysql_slave
        target: /var/lib/mysql

  mysql8:
    image: mysql:8.0
    command: --log-bin=mysql-bin --expire-logs-days=1 --server-id=123 --default-time-zone=Asia/Shanghai --binlog-row-image=full --character-set-server=utf8 --gtid-mode=on --enforce-gtid-consistency=on --log-slave-updates=on
    ports:
      - target: 3306
        published: 3308
        protocol: tcp
        mode: host
    environment:
      MYSQL_ROOT_PASSWORD: 123456@Hello
    volumes:
      - type: volume
        source: mysql8
        target: /var/lib/mysql
    depends_on:
      - mysql8_slave

  mysql8_slave:
    image: mysql:8.0
    command: --log-bin=mysql-bin --expire-logs-days=1 --server-id=124 --default-time-zone=Asia/Shanghai --binlog-row-image=full --character-set-server=utf8 --gtid-mode=on --enforce-gtid-consistency=on --log-slave-updates=on
    ports:
      - target: 3306
        published: 3310
        protocol: tcp
        mode: host
    environment:
      MYSQL_ROOT_PASSWORD: 123456@Hello
    volumes:
      - type: volume
        source: mysql8_slave
        target: /var/lib/mysql

  debezium_connect:
    image: debezium/connect:1.5
    ports:
      - target: 8083
        published: 8083
        protocol: tcp
        mode: host
    environment:
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      BOOTSTRAP_SERVERS: kafka1:9092
    depends_on:
      - zookeeper
      - kafka1
      - mysql

  canal_connect:
    image: canal/canal-server:v1.1.5
    ports:
      - target: 11111
        published: 11111
        protocol: tcp
        mode: host
    #      - target: 11110
    #        published: 11110
    #        protocol: tcp
    #        mode: host
    environment:
      - canal.instance.global.spring.xml=classpath:spring/default-instance.xml
      - canal.zkServers=zookeeper:2181
      - kafka.bootstrap.servers=kafka1:9092
      - canal.serverMode=kafka
      - canal.instance.master.address=mysql:3306
      - canal.instance.dbUsername=root
      - canal.instance.dbPassword=123456
      - canal.instance.filter.regex=test\..*
    entrypoint: [ "/bin/bash", "-c", "sed -i -e 's/kafka.bootstrap.servers.*/kafka.bootstrap.servers = kafka1:9092/' /home/admin/canal-server/conf/canal.properties && /alidata/bin/main.sh /home/admin/app.sh" ]
    depends_on:
      - kafka1
      - mysql
      - zookeeper

  clickhouse1:
    image: yandex/clickhouse-server:21.12
    ports:
      - target: 8123
        published: 8123
        protocol: tcp
        mode: host
      - target: 9000
        published: 9000
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: clickhouse1
        target: /data/clickhouse/clickhouse-server
      - ./conf/metrika1.xml:/etc/clickhouse-server/metrika.xml
      - ./conf/config.xml:/etc/clickhouse-server/config.xml
      - ./conf/clickhouse_test_user.xml:/etc/clickhouse-server/users.d/clickhouse_test_user.xml
    entrypoint: [ "/bin/bash", "-c", "chown clickhouse:clickhouse /data/clickhouse/clickhouse-server && runuser -u clickhouse /entrypoint.sh" ]
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    depends_on:
      - zookeeper
      - clickhouse2
      - clickhouse3
      - clickhouse4
      - clickhouse5
      - clickhouse6

  clickhouse2:
    image: yandex/clickhouse-server:21.12
    volumes:
      - type: volume
        source: clickhouse2
        target: /data/clickhouse/clickhouse-server
      - ./conf/metrika2.xml:/etc/clickhouse-server/metrika.xml
      - ./conf/config.xml:/etc/clickhouse-server/config.xml
      - ./conf/clickhouse_test_user.xml:/etc/clickhouse-server/users.d/clickhouse_test_user.xml
    entrypoint: [ "/bin/bash", "-c", "chown clickhouse:clickhouse /data/clickhouse/clickhouse-server && runuser -u clickhouse /entrypoint.sh" ]
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  clickhouse3:
    image: yandex/clickhouse-server:21.12
    volumes:
      - type: volume
        source: clickhouse3
        target: /data/clickhouse/clickhouse-server
      - ./conf/metrika3.xml:/etc/clickhouse-server/metrika.xml
      - ./conf/config.xml:/etc/clickhouse-server/config.xml
      - ./conf/clickhouse_test_user.xml:/etc/clickhouse-server/users.d/clickhouse_test_user.xml
    entrypoint: [ "/bin/bash", "-c", "chown clickhouse:clickhouse /data/clickhouse/clickhouse-server && runuser -u clickhouse /entrypoint.sh" ]
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  clickhouse4:
    image: yandex/clickhouse-server:21.12
    volumes:
      - type: volume
        source: clickhouse4
        target: /data/clickhouse/clickhouse-server
      - ./conf/metrika4.xml:/etc/clickhouse-server/metrika.xml
      - ./conf/config.xml:/etc/clickhouse-server/config.xml
      - ./conf/clickhouse_test_user.xml:/etc/clickhouse-server/users.d/clickhouse_test_user.xml
    entrypoint: [ "/bin/bash", "-c", "chown clickhouse:clickhouse /data/clickhouse/clickhouse-server && runuser -u clickhouse /entrypoint.sh" ]
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  clickhouse5:
    image: yandex/clickhouse-server:21.12
    volumes:
      - type: volume
        source: clickhouse5
        target: /data/clickhouse/clickhouse-server
      - ./conf/metrika5.xml:/etc/clickhouse-server/metrika.xml
      - ./conf/config.xml:/etc/clickhouse-server/config.xml
      - ./conf/clickhouse_test_user.xml:/etc/clickhouse-server/users.d/clickhouse_test_user.xml
    entrypoint: [ "/bin/bash", "-c", "chown clickhouse:clickhouse /data/clickhouse/clickhouse-server && runuser -u clickhouse /entrypoint.sh" ]
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  clickhouse6:
    image: yandex/clickhouse-server:21.12
    volumes:
      - type: volume
        source: clickhouse6
        target: /data/clickhouse/clickhouse-server
      - ./conf/metrika6.xml:/etc/clickhouse-server/metrika.xml
      - ./conf/config.xml:/etc/clickhouse-server/config.xml
      - ./conf/clickhouse_test_user.xml:/etc/clickhouse-server/users.d/clickhouse_test_user.xml
    entrypoint: [ "/bin/bash", "-c", "chown clickhouse:clickhouse /data/clickhouse/clickhouse-server && runuser -u clickhouse /entrypoint.sh" ]
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  clickhouse_client:
    image: yandex/clickhouse-client:21.12
    command: --host clickhouse1
    stdin_open: true
    tty: true
    depends_on:
      - clickhouse1

  oracle11:
    #sqlplus flinkuser/flinkpw@XE
    #sqlplus "SYS/oracle" as sysdba
    image: yuxialuo/oracle-xe-11g-r2-cdc-demo:v1.0
    ports:
      - target: 1521
        published: 1521
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: oracle11
        target: /u01/app/oracle/fast_recovery_area

  oracle19:
    #sqlplus debezium/dbz@ORCLCDB
    #sqlplus / as sysdba
    image: goodboy008/oracle-19.3.0-ee:non-cdb
    ports:
      - target: 1521
        published: 1521
        protocol: tcp
        mode: host

  dns:
    image: jpillora/dnsmasq
    ports:
      - "127.0.0.1:53:53/udp"
    environment:
      - TZ=Asia/Shanghai
      - HTTP_USER=root
      - HTTP_PASS=123456
    volumes:
      - ./conf/dnsmasq.conf:/etc/dnsmasq.conf

  pulsar1:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    volumes:
      - ./conf/pulsar_broker1.conf:/pulsar/conf/broker.conf
      - ./conf/pulsar_client.conf:/pulsar/conf/client.conf
    command: /pulsar/bin/pulsar broker

  pulsar2:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    volumes:
      - ./conf/pulsar_broker2.conf:/pulsar/conf/broker.conf
    command: /pulsar/bin/pulsar broker

  pulsar3:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    volumes:
      - ./conf/pulsar_broker3.conf:/pulsar/conf/broker.conf
    command: /pulsar/bin/pulsar broker

  pulsarinit:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    command: [ "/bin/bash", "-c", "/pulsar/bin/pulsar initialize-cluster-metadata --cluster pulsar-cluster --zookeeper zookeeper:2181/pulsar --configuration-store zookeeper:2181/pulsar --web-service-url http://pulsar1:8080,pulsar2:8080,pulsar3:8080 --web-service-url-tls https://pulsar1:8443,pulsar2:8443,pulsar3:8443 --broker-service-url pulsar://pulsar1:6650,pulsar2:6650,pulsar3:6650 --broker-service-url-tls pulsar+ssl://pulsar1:6651,pulsar2:6651,pulsar3:6651 && /pulsar/bin/pulsar initialize-transaction-coordinator-metadata -cs zookeeper:2181/pulsar -c pulsar-cluster" ]

  pulsarcli:
    image: apachepulsar/pulsar-all:2.10.0
    user: root
    volumes:
      - ./conf/pulsar_client.conf:/pulsar/conf/client.conf
    command: /usr/bin/tail -f /etc/profile

  pulsar_proxy:
    image: apachepulsar/pulsar-all:2.10.0
    user: root
    volumes:
      - ./conf/pulsar_proxy.conf:/pulsar/conf/proxy.conf
    command: /pulsar/bin/pulsar proxy
    depends_on:
      - zookeeper
      - bookie1
      - bookie2
      - bookie3
      - pulsar1
      - pulsar2
      - pulsar3

  bookie1:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    volumes:
      - type: volume
        source: pulsar1
        target: /data
      - ./conf/pulsar_bookkeeper1.conf:/pulsar/conf/bookkeeper.conf
    command: /pulsar/bin/pulsar bookie

  bookie2:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    volumes:
      - type: volume
        source: pulsar2
        target: /data
      - ./conf/pulsar_bookkeeper2.conf:/pulsar/conf/bookkeeper.conf
    command: /pulsar/bin/pulsar bookie

  bookie3:
    image: apachepulsar/pulsar-all:2.9.2
    user: root
    volumes:
      - type: volume
        source: pulsar3
        target: /data
      - ./conf/pulsar_bookkeeper3.conf:/pulsar/conf/bookkeeper.conf
    command: /pulsar/bin/pulsar bookie

  doris1:
    image: apache/incubator-doris:build-env-ldb-toolchain-latest
    volumes:
      - type: volume
        source: doris1
        target: /doris
      - /home/lzs/.m2:/root/.m2
      - /home/lzs:/home/lzs
      - /data:/data
    command: [ "/bin/bash", "-c", "start_be.sh --daemon && start_fe.sh --daemon && tail -f /etc/profile" ]
    environment:
      DORIS_HOME: /doris/incubator-doris/output
      PATH: /doris/incubator-doris/output/fe/bin:/doris/incubator-doris/output/be/bin:/var/local/ldb-toolchain/bin/:/var/local/thirdparty/installed/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  pg:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: 123456
      POSTGRES_USER: root
    volumes:
      - type: volume
        source: pg
        target: /var/lib/postgresql/data
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host

  gp:
    image: projectairws/greenplum:latest
    environment:
      POSTGRES_PASSWORD: gpadmin
      POSTGRES_USER: gpadmin
    volumes:
      - type: volume
        source: greenplum
        target: /gpdata
      - ./conf/start_greenplum.sh:/app/start_greenplum.sh
    ports:
      - target: 5432
        published: 15432
        protocol: tcp
        mode: host

  # acl setuser root >123456@Hello on allKeys allCommands
  redis:
    image: redis
    volumes:
      - type: volume
        source: redis
        target: /data
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    command:
      - "redis-server"
      - "--requirepass"
      - "123456@Hello"

  # rs.initiate({"_id":"rs","members":[{"_id":0,"host":"mongo1:27017",priority:3},{"_id":1,"host":"mongo2:27017",priority:2},{"_id":2,"host":"mongo3:27017",priority:0,slaveDelay:86400}]})
  # password='123456'
  # hosts='127.0.0.1:27017'
  # db='admin'
  # mongo mongodb://root:${password}@${hosts}/${db}?authSource=admin
  mongo1:
    image: mongo:4.4
    volumes:
      - type: volume
        source: mongo1
        target: /data
    entrypoint:
      - /bin/bash
      - -c
      - "echo fsKpkFJn+MYHaQVQo0EynX0WVTgI6PiQiDkZjcSIAfU= >/data/mongo.keyfile && chown mongodb /data/mongo.keyfile && chmod 400 /data/mongo.keyfile && docker-entrypoint.sh --keyFile /data/mongo.keyfile --replSet rs"
    ports:
      - target: 27017
        published: 27017
        protocol: tcp
        mode: host
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: "123456"
    depends_on:
      - mongo2
      - mongo3

  mongo2:
    image: mongo:4.4
    volumes:
      - type: volume
        source: mongo2
        target: /data
    entrypoint:
      - /bin/bash
      - -c
      - "echo fsKpkFJn+MYHaQVQo0EynX0WVTgI6PiQiDkZjcSIAfU= >/data/mongo.keyfile && chown mongodb /data/mongo.keyfile && chmod 400 /data/mongo.keyfile && docker-entrypoint.sh --keyFile /data/mongo.keyfile --replSet rs"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: "123456"

  mongo3:
    image: mongo:4.4
    volumes:
      - type: volume
        source: mongo3
        target: /data
    entrypoint:
      - /bin/bash
      - -c
      - "echo fsKpkFJn+MYHaQVQo0EynX0WVTgI6PiQiDkZjcSIAfU= >/data/mongo.keyfile && chown mongodb /data/mongo.keyfile && chmod 400 /data/mongo.keyfile && docker-entrypoint.sh --keyFile /data/mongo.keyfile --replSet rs"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: "123456"

  # rs.initiate({"_id":"rs","members":[{"_id":0,"host":"mongo4:27017",priority:3},{"_id":1,"host":"mongo5:27017",priority:2},{"_id":2,"host":"mongo6:27017",priority:0,slaveDelay:86400}]})
  # password='123456'
  # hosts='127.0.0.1:27018'
  # db='admin'
  # mongo mongodb://root:${password}@${hosts}/${db}?authSource=admin
  mongo4:
    image: mongo:4.4
    volumes:
      - type: volume
        source: mongo4
        target: /data
    entrypoint:
      - /bin/bash
      - -c
      - "echo fsKpkFJn+MYHaQVQo0EynX0WVTgI6PiQiDkZjcSIAfU= >/data/mongo.keyfile && chown mongodb /data/mongo.keyfile && chmod 400 /data/mongo.keyfile && docker-entrypoint.sh --keyFile /data/mongo.keyfile --replSet rs"
    ports:
      - target: 27017
        published: 27018
        protocol: tcp
        mode: host
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: "123456"
    depends_on:
      - mongo5
      - mongo6

  mongo5:
    image: mongo:4.4
    volumes:
      - type: volume
        source: mongo5
        target: /data
    entrypoint:
      - /bin/bash
      - -c
      - "echo fsKpkFJn+MYHaQVQo0EynX0WVTgI6PiQiDkZjcSIAfU= >/data/mongo.keyfile && chown mongodb /data/mongo.keyfile && chmod 400 /data/mongo.keyfile && docker-entrypoint.sh --keyFile /data/mongo.keyfile --replSet rs"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: "123456"

  mongo6:
    image: mongo:4.4
    volumes:
      - type: volume
        source: mongo6
        target: /data
    entrypoint:
      - /bin/bash
      - -c
      - "echo fsKpkFJn+MYHaQVQo0EynX0WVTgI6PiQiDkZjcSIAfU= >/data/mongo.keyfile && chown mongodb /data/mongo.keyfile && chmod 400 /data/mongo.keyfile && docker-entrypoint.sh --keyFile /data/mongo.keyfile --replSet rs"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: "123456"

  rmq0:
    image: apache/rocketmq:4.9.7
    volumes:
      - type: volume
        source: rmq
        target: /home/rocketmq
    command: sh mqnamesrv
    environment:
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin:/home/rocketmq/rocketmq-4.9.4/bin
    ports:
      - target: 9876
        published: 9876
        protocol: tcp
        mode: host

  rmq1:
    image: apache/rocketmq:4.9.7
    volumes:
      - type: volume
        source: rmq1
        target: /home/rocketmq
      - ./conf/rmq_broker1.conf:/opt/rocketmq/conf/broker.conf
    command: sh mqbroker -c /opt/rocketmq/conf/broker.conf
    environment:
      - NAMESRV_ADDR=rmq0:9876

  rmq2:
    image: apache/rocketmq:4.9.7
    volumes:
      - type: volume
        source: rmq2
        target: /home/rocketmq
      - ./conf/rmq_broker2.conf:/opt/rocketmq/conf/broker.conf
    command: sh mqbroker -c /opt/rocketmq/conf/broker.conf
    environment:
      - NAMESRV_ADDR=rmq0:9876

  rmq:
    image: apacherocketmq/rocketmq-dashboard:latest
    ports:
      - target: 8080
        published: 18080
        protocol: tcp
        mode: host
    environment:
      - NAMESRV_ADDR=rmq0:9876
    depends_on:
      - rmq0
      - rmq1
      - rmq2

  prometheus:
    image: prom/prometheus
    volumes:
      - type: volume
        source: prometheus
        target: /prometheus
      - ./conf/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-admin-api"

  pushgateway:
    image: prom/pushgateway
    ports:
      - target: 9091
        published: 9091
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: pushgateway
        target: /pushgateway

  grafana:
    image: grafana/grafana
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: grafana
        target: /var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 123456

    depends_on:
      - prometheus
      - pushgateway

  # mysql -h127.0.0.1 -uroot -P9030 -p123456@Hello
  # ALTER USER 'root'@'%' IDENTIFIED BY '123456@Hello';
  # create user test IDENTIFIED BY '123456@Hello' DEFAULT ROLE 'root';
  # mysql -h127.0.0.1 -utest -P9030 --binary-as-hex -p123456@Hello
  sr_new:
    image: starrocks/allin1-ubuntu
    ports:
      - target: 8040
        published: 8040
        protocol: tcp
        mode: host
      - target: 8030
        published: 8030
        protocol: tcp
        mode: host
      - target: 9030
        published: 9030
        protocol: tcp
        mode: host
    environment:
      MYSQL_ROOT_PASSWORD: 123456@Hello
    volumes:
      - type: volume
        source: sr_fe
        target: /data/deploy/starrocks/fe/meta
      - type: volume
        source: sr_be
        target: /data/deploy/starrocks/be/storage
      - ./conf/sr_director_run.sh:/data/deploy/starrocks/director/run.sh

  # mysql -h127.0.0.1 -uroot -P9030
  # SHOW PROC '/frontends'\G
  # ALTER SYSTEM ADD BACKEND "sr_be1:9050"; ALTER SYSTEM ADD BACKEND "sr_be2:9050"; ALTER SYSTEM ADD BACKEND "sr_be3:9050";
  # SHOW PROC '/backends'\G
  # SET PASSWORD FOR 'root' = PASSWORD('123456@Hello');
  # mysql -h127.0.0.1 -uroot -P9030 --binary-as-hex -p123456@Hello
  sr:
    image: ccr.ccs.tencentyun.com/sammieliu/starrocks_fe:3.1.6
    entrypoint:
      - /bin/bash
      - -c
      - "rm -fv /usr/local/fe/bin/fe.pid && /usr/local/fe/bin/start_fe.sh"
    ports:
      - target: 8030
        published: 8030
        protocol: tcp
        mode: host
      - target: 9030
        published: 9030
        protocol: tcp
        mode: host
    volumes:
      - type: volume
        source: sr_fe1
        target: /usr/local/fe/meta
    depends_on:
      - sr_be1
      - sr_be2
      - sr_be3

  sr_be1:
    image: ccr.ccs.tencentyun.com/sammieliu/starrocks_be:3.1.6
    entrypoint:
      - /bin/bash
      - -c
      - "rm -fv /usr/local/be/bin/be.pid && /usr/local/be/bin/start_be.sh"
    volumes:
      - type: volume
        source: sr_be1
        target: /usr/local/be/storage

  sr_be2:
    image: ccr.ccs.tencentyun.com/sammieliu/starrocks_be:3.1.6
    entrypoint:
      - /bin/bash
      - -c
      - "rm -fv /usr/local/be/bin/be.pid && /usr/local/be/bin/start_be.sh"
    volumes:
      - type: volume
        source: sr_be2
        target: /usr/local/be/storage

  sr_be3:
    image: ccr.ccs.tencentyun.com/sammieliu/starrocks_be:3.1.6
    entrypoint:
      - /bin/bash
      - -c
      - "rm -fv /usr/local/be/bin/be.pid && /usr/local/be/bin/start_be.sh"
    volumes:
      - type: volume
        source: sr_be3
        target: /usr/local/be/storage

  influxdb:
    image: influxdb:1.8
    ports:
      - target: 8086
        published: 8086
        protocol: tcp
        mode: host
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: root
      DOCKER_INFLUXDB_INIT_PASSWORD: 123456abc
      DOCKER_INFLUXDB_INIT_ORG: my-org
      DOCKER_INFLUXDB_INIT_BUCKET: my-bucket
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: admin-token
    volumes:
      - type: volume
        source: influxdb
        target: /var/lib/influxdb2

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - type: volume
        source: etcd
        target: /etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - type: volume
        source: minio
        target: /minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.0-beta
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - type: volume
        source: milvus
        target: /var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"

volumes:
  zkDataDir:
  zkDataLogDir:
  debug:
  kafka1:
  kafka2:
  kafka3:
  es:
  mysql:
  mysql_slave:
  mysql8:
  mysql8_slave:
  clickhouse1:
  clickhouse2:
  clickhouse3:
  clickhouse4:
  clickhouse5:
  clickhouse6:
  pulsar1:
  pulsar2:
  pulsar3:
  doris1:
  pg:
  greenplum:
  redis:
  mongo1:
  mongo2:
  mongo3:
  mongo4:
  mongo5:
  mongo6:
  rmq:
  rmq1:
  rmq2:
  prometheus:
  pushgateway:
  grafana:
  oracle11:
  oracle19:
  sr_fe:
  sr_be:
  sr_fe1:
  sr_be1:
  sr_be2:
  sr_be3:
  influxdb:
  etcd:
  minio:
  milvus:
